#include "mbed.h"
#include "m3pi.h"
#include "WiflyInterface.h"
#define ECHO_SERVER_PORT   7
//#include "rtos.h"
Serial pc(USBTX, USBRX);
m3pi m3pi;
LocalFileSystem local("local");  

    //will house all of the data in the Commands.txt file. has space for 510 commands + one speed variable at begining (M5) 
    char buffer[8];
    char Tmpbuffer[8];
    char ReadBuffer[512];
    WiflyInterface wifly(p28, p27, p23, p24 ,"My ASUS", "21564e8c3191", WPA);
    UDPSocket  server;
    Endpoint client;
    int count=0;
    int flag=0;
    //Thread t;
   FILE *fp;
   Timer t;
   int rflag=0;
   void write(){
         
        if(flag==0){
        printf("open file");
        int n = server.receiveFrom(client, buffer, 8);
        char out[20]="/local/";
        snprintf(out, sizeof(out), "%s%s.txt", out, buffer);
        fp= fopen(out, "w"); 
        }
       
       
        if(buffer[0] != 'e' && buffer[0] != 'm' && flag==1){
            t.stop();
            fprintf(fp,"%s %.2f \n ",Tmpbuffer,t.read());
            t.reset();
            t.start();
            strcpy(Tmpbuffer,buffer);
            
            
        }
        flag=1;
         if(buffer[0] == 'e'){
            fclose(fp);
            flag=0;
        }
   
}
void read(){
        printf("open read file");
        int v = server.receiveFrom(client, buffer, 8);
        char out[20]="/local/";
        snprintf(out, sizeof(out), "%s%s.txt", out, buffer);
        FILE *CMD = fopen(out, "r");
              printf("\n reading...\n");  
              int m=0;
               while (!feof(CMD)) {
                 ReadBuffer[m]= fgetc (CMD); 
                 m++;
               }
                fclose(CMD);
                ReadBuffer[m+1]='*';
                m=0;
               while (ReadBuffer[m]!='*') {
                printf("%c",ReadBuffer[m]); 
                m++;
               } 
      int n=0;
      //printf("in read " );
      while (ReadBuffer[n]!='*') {
               //printf("after if in read " );
               if(ReadBuffer[n]=='f' || ReadBuffer[n]=='b' || ReadBuffer[n]=='r' || ReadBuffer[n]=='l' || ReadBuffer[n]=='n')
               {
                           
               
               
                     // printf("buffer %c" ,ReadBuffer[n]);
                    //printf("after second if " );
                    if(ReadBuffer[n] == 'f')
                     {
                       m3pi.forward((ReadBuffer[n+1]-48)/40.0); }
            
                    if(ReadBuffer[n] == 'b')
                       {
                         m3pi.backward((ReadBuffer[n+1]-48)/40.0);} 
                    
                   if(ReadBuffer[n] == 'l')
                  {
                        m3pi.right((ReadBuffer[n+1]-48)/10.0); }
              
                    if(ReadBuffer[n] == 'r')
                    {
                          m3pi.left((ReadBuffer[n+1]-48)/10.0); }
                    if(ReadBuffer[n] == 'n')  {
                        m3pi.left(0); }  
           
                    float w=(ReadBuffer[n+3]-48) + (ReadBuffer[n+5]-48)*0.1 + (ReadBuffer[n+6]-48)*0.01;
                printf("waiting");
                 wait(w);
                   printf("%.2f",w);
                }
                n++;
                
         } 
          m3pi.stop();
}

void move(){
        //printf("buffer %s" ,buffer);
        
       // 
          //printf("buffer %s" ,buffer);
        
        //fprintf(fp,"%s \n ",buffer);
       
        if(buffer[0] == 'f')
        {
              m3pi.forward((buffer[1]-48)/40.0); }
            
         if(buffer[0] == 'b')
        {
              m3pi.backward((buffer[1]-48)/40.0);} 
            
         if(buffer[0] == 'l')
        {
              m3pi.right((buffer[1]-48)/10.0); }
              
         if(buffer[0] == 'r')
        {
              m3pi.left((buffer[1]-48)/10.0); }
        if(buffer[0] == 'n')  {
                m3pi.left(0); }  
        /*if(buffer[0] == 'e'){
         fclose(fp);    }*/
           
}

void ConnectionInit(){
    wifly.init(); // use dhcp
    while (!wifly.connect()); // join the network
    printf("ip address is %s\n\r", wifly.getIPAddress()); 
    server.bind(ECHO_SERVER_PORT);   
    
}


void TCPMSG(){
     
   printf("\nWait for massege...\n");
   
    //sizeof(buffer)
     //char buffer[256];
   // while (true) {
        int n = server.receiveFrom(client, buffer, 2);
        buffer[n] = 0;  
        if(buffer[0]=='m' || flag==1){
            printf("\nWait for file name...\n");
            write();                
        }
        if(buffer[0]=='q'){
            read();                     
        }
        move();  
        TCPMSG();   
    }

int main() {
    ConnectionInit();
    TCPMSG();
   
}